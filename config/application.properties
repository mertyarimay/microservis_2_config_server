spring.application.name=config_server

#spring boot uygulamamizin 8888 portu üzerinde çali?ir bu port üzerinden config servera istekler gönderilir
server.port=8889

# spring cloud config server in konfigurasyon  dosyalarini alacagi git depo adresidir
#Bu uri:config serverin konfigurasyonlarini çekmek için baglanacagi git deposunu tanimlar
#Dikkat:Eger bu url private ise personal access token eklememiz gerekiyor
spring.cloud.config.server.git.uri=https://github.com/mertyarimay/microservis_2_config_server


#Config serverin git dalini konfigürasyonun çekecegi branch tir
spring.cloud.config.server.git.default-label=main

#Config serverin git deposundaki konfigurasyon dosyalarinin arayacagi dizindir
#config repo dedigimiz alan  config serveren oldugu yerdir
spring.cloud.config.server.git.search-paths=config

#spring cloud config server  ba?lat?ld???nda yap?land?rma dosyalar? bar?nd?ran git deposunu klonlanmas?n? sa?lar.
#config  server her ba?lat?ld???nda yap?land?rma dosyalar?n? yeniden indirir.
spring.cloud.config.server.git.clone-on-start=true

#Sprin cloud ile  çal??an bir uygulaman?n log seviyesini belirler.
logging.level.org.springframework.cloud=DEBUG


#database config

spring.datasource.url=jdbc:postgresql://localhost:5432/eCommerce
spring.datasource.username=postgres
spring.datasource.password=12345
#postgre veritaban?na ba?lanabilmek için gerekli sürücü
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.show-sql=true
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
#create:veritaban? ?emas?n? olu?turur e?er tablolar varsa siler tekrar olu?turur
#create-drop :veritaban? ?emas?n? olu?turur e?er tablolar varsa siler tekrar olu?turur
#validate : var olan tablolar? kar??la?t?r?r herhangi bir de?i?iklik yapmaz
#update  :  veri taban? silmez  yeni tablolar ekler veya güncellemeler yapar.
